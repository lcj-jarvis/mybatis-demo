<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mrlu.mybatis.dao.StudentDao">
    <!--
       select标签表示查询操作
       id:你要执行的sql语法的唯一标识，mybatis会使用这个id值来找到要执行的sql语句
          可以自定义，但是要求和你使用接口中的方法名称一致
       returnType：表示结果的类型，是sql语句执行后得到ResultSet，遍历这个ResultSet得到java对象的类型。
                   值写类型的全类名。大多数情况和方法的返回值类型是一致的
    -->
    <select id="queryStudents" resultType="com.mrlu.mybatis.domain.Student">
      select * from student order by id
      /*注意，这里的sql语句写不写分号都行*/
    </select>

    <!--
       MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。
       MyBatis 会加载带有匹配当前数据库 databaseId 属性和所有不带 databaseId 属性的语句。
       如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。
       即上面的sql语句会被舍弃
    -->
    <select id="queryStudents" resultType="com.mrlu.mybatis.domain.Student" databaseId="mysql">
      select * from student order by id
      <!--注意，这里的sql语句写不写分号都行-->
    </select>

    <!--
      因为没有配置oracle的数据库连接，所以不能使用
    -->
    <!--<select id="queryStudents" resultType="com.mrlu.mybatis.domain.Student" databaseId="oracle">
      select * from student order by id
      /*注意，这里的sql语句写不写分号都行*/
    </select>-->

    <!--
       执行插入操作
       #{id},#{name},#{email},#{age}
       分别获取到Student对象对应的属性
    -->
    <insert id="insertStudent">
        insert into student values(#{id},#{name},#{email},#{age})
    </insert>
</mapper>
<!--
   sql映射文件：写sql语句的，mybatis会执行这些sql
   1、指定约束的条件
   <!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   2、约束文件的作用：限制，检查在当前文件中出现的标签、属性必须符合mybatis的要求
   3、mapper是当前文件的根标签，必须的
      namespace：叫做命名空间，唯一值的，可以是自定义的字符串
                 要求你使用dao接口的全类名
   4、在当前文件中，可以使用特定的标签，表示数据库的特定操作
     <select>标签表示执行查询，执行查询的sql语句
     <update>标签表示修改，执行更新的sql语句
     <insert>标签表示插入，执行插入的sql语句
     <delete>标签表示删除，执行删除的sql语句
-->